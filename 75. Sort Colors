class Solution {
    public void sortColors(int[] nums) {
        // Bubble Sort
        // for(int i = 0; i < nums.length; i++){
        //     for(int j= i+1; j < nums.length; j++){
        //         if(nums[j] < nums[i]){
        //         int temp = nums[i];
        //         nums[i] = nums[j];
        //         nums[j] = temp;                
        //         } 
        //     }
        // }

        // Selection Sort
        // for (int i = 0; i < nums.length - 1; i++) {
        //         int min = i;
        //         for (int j = i + 1; j < nums.length; j++) {
        //             if (nums[j] < nums[min]) {
        //                 min = j;
        //             }
        //         }
        //         int temp = nums[min];
        //         nums[min] = nums[i];
        //         nums[i] = temp;
        //     }

        // Insertion Sort
        // for(int i = 1; i < nums.length; i++){
        //         int key = nums[i];
        //         int j = i - 1;
        //     while (j >= 0 && key < nums[j]) {
        //         nums[j + 1] = nums[j];
        //         --j;
        //     }
        //         nums[j + 1] = key;
        // }

        // Merge Sort
    //     mergeSort(nums, 0, nums.length - 1);
    // }

    // private void mergeSort(int[] nums, int left, int right) {
    //     if (left < right) {
    //         int mid = left + (right - left) / 2;

    //         mergeSort(nums, left, mid);
    //         mergeSort(nums, mid + 1, right);

    //         merge(nums, left, mid, right);
    //     }
    // }

    // private void merge(int[] nums, int left, int mid, int right) {
    //     int n1 = mid - left + 1;
    //     int n2 = right - mid;

    //     int[] leftArray = new int[n1];
    //     int[] rightArray = new int[n2];

    //     for (int i = 0; i < n1; i++)
    //         leftArray[i] = nums[left + i];
    //     for (int j = 0; j < n2; j++)
    //         rightArray[j] = nums[mid + 1 + j];

    //     int i = 0, j = 0, k = left;
    //     while (i < n1 && j < n2) {
    //         if (leftArray[i] <= rightArray[j]) {
    //             nums[k++] = leftArray[i++];
    //         } else {
    //             nums[k++] = rightArray[j++];
    //         }
    //     }

    //     while (i < n1) {
    //         nums[k++] = leftArray[i++];
    //     }

    //     while (j < n2) {
    //         nums[k++] = rightArray[j++];
    //     }

    // Dutch National Flag Algo:

        int low = 0, mid = 0, high = nums.length - 1;
        
        while (mid <= high) {
            if (nums[mid] == 0) {
                swap(nums, low++, mid++);
            } else if (nums[mid] == 1) {
                mid++;
            } else { // nums[mid] == 2
                swap(nums, mid, high--);
            }
        }
    }

    private void swap(int[] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
}

