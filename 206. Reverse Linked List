/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode reverseList(ListNode head) {
        ListNode prev = null;    // Initialize the previous node as null
        ListNode current = head; // Start with the head of the list
        ListNode next = null;    // Temporary pointer for the next node

        while (current != null) {     // Traverse the list
            next = current.next;      // Save the next node
            current.next = prev;      // Reverse the pointer
            prev = current;           // Move prev to current
            current = next;           // Move current to next
        }

        return prev; // Return the new head (prev is the new head)
    }
}
