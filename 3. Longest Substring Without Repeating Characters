class Solution {
    public int lengthOfLongestSubstring(String s) {
        if(s.length() == 0) return 0;
        int[] hash = new int[255];
        Arrays.fill(hash, -1);

        int left = 0, right = 0, maxLen = 0; 
        
        while(right < s.length()){
            if(hash[s.charAt(right)] != -1){
                if(hash[s.charAt(right)] >= left){
                    left = hash[s.charAt(right)] + 1;
                }
            }
           int len = right - left  + 1;
            maxLen =  Math.max(maxLen, len);
            hash[s.charAt(right)] = right;
            right++;
        } 
        return maxLen;
    }
}

class Solution1 {
    public int lengthOfLongestSubstring(String s) {
        if(s.length() == 0) return 0;

        int maxLen = Integer.MIN_VALUE;
        for(int i = 0; i < s.length(); i++){
            int[] hash = new int[255];
            Arrays.fill(hash, 0);
            int len = 0;
            for(int j = i; j < s.length(); j++){
                if(hash[s.charAt(j)] == 1) break;

                len = j - i +1;
                maxLen = Math.max(len, maxLen);
                hash[s.charAt(j)] = 1;
            }
        }
        return maxLen;
    }
}
