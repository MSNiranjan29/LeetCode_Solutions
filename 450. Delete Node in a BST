/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode deleteNode(TreeNode root, int key) {
        return deleteNodeRec(root, key);
    }
    TreeNode deleteNodeRec(TreeNode root, int key){
        if(root == null){
            return null;
        }

        if(key < root.val){
            root.left = deleteNodeRec(root.left, key);
        }
        else if(key > root.val){
            root.right = deleteNodeRec(root.right, key);
        }
        else{
            if(root.left == null){
                return root.right;
            }
            else if(root.right == null){
                return root.left;
            }
            TreeNode successor = minValue(root.right);
            root.val = successor.val;
            root.right = deleteNodeRec(root.right, successor.val);        }
        return root;
    }

    TreeNode minValue(TreeNode root){
          while (root.left != null) {
            root = root.left;
        }
        return root;
    }

}
