class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
            int m=matrix.length;
            int n=matrix[0].length;
            int low=0;
            int high= m*n-1;
            while(low <= high){
                int mid = low + (high - low)/2;
                int midele=matrix[mid/n][mid%n];
                if(target == midele){
                    return true;
                }
                else if(target < midele){
                    high = mid-1;
                }
                else{
                    low=mid+1;
                }
    }
return false;
}
}
class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int rows = matrix.length;
        int cols = matrix[0].length;
        int low = 0, high = rows * cols - 1;

        while (low <= high) {
            int mid = low + (high - low) / 2;
            int row = mid / cols;
            int col = mid % cols;
            int midValue = matrix[row][col];

            if (midValue == target) {
                return true;
            } else if (midValue < target) {
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }

        return false;
    }
}
