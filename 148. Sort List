/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode sortList(ListNode head) {

        if(head == null || head.next == null) return head;

        ListNode middle = getMiddle(head);
        ListNode right = middle.next;
        middle.next = null;

        ListNode leftSorted = sortList(head);
        ListNode rightSorted = sortList(right);

        return getMerge(leftSorted, rightSorted);
    }

    // for merge:
    public static ListNode getMerge(ListNode list1, ListNode list2){
        ListNode temporary = new ListNode(0);

        ListNode current = temporary;

        while(list1 != null && list2 != null){
            if(list1.val <= list2.val){
                current.next = list1;
                list1 = list1.next;
            }
            else{
                current.next = list2;
                list2 = list2.next;
            }
            current = current.next;
        }
            if(list1 != null){
                current.next = list1;
            }
            else if(list2 != null){
                current.next  = list2;
            }
        return temporary.next;
    }

    // for middle cal:
    public static ListNode getMiddle(ListNode start){
        ListNode slow = start, fast = start;

        while(fast.next != null && fast.next.next != null){
            slow = slow.next;
            fast = fast.next.next;
        }
        return slow;
    }
}
